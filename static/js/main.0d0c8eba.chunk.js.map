{"version":3,"sources":["service/TranslateAPI.js","components/SearchResultCard.jsx","components/SearchResult.jsx","components/SearchTemplate.jsx","components/Main.jsx","App.js","index.js"],"names":["API_KEY","process","WordTitle","styled","div","EachWordDef","EachWordDefText","SameItem","button","span","SameWordContainer","SearchResultCard","word","wordDefArray","sameWordResultObj","useState","sameWordArray","map","item","indexOf","Container","SearchResult","query","searchResultObj","itemName","SearchContainer","Input","input","Button","SearchTemplate","props","inputValue","setInputValue","storedData","setStoredData","setShowingData","setLoading","data","setData","onPressSearch","text","console","log","items","Set","length","slice","tempObj","localStorage","setItem","JSON","stringify","storeData","myFnc","options","method","url","axios","request","then","response","responseData","parseString","err","result","channel","catch","error","searchKorean","value","temp","tempArray","i","j","push","def","objKeys","Object","keys","eachDefLength","tempResult","k","splitKeys","newTempObj","forEach","resultTempObj","countNum","config","getWord","wordTemp","defTemp","includes","defArray","searchResult","resultLength","setTimeout","getItem","jsonVal","parse","preVal","reverse","getLocalData","placeholder","onChange","e","target","onClick","Main","GlobalStyle","createGlobalStyle","LogoImg","img","App","src","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d0c8eba.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { parseString } from 'xml2js';\r\n\r\nconst API_KEY = process.env.REACT_APP_KOR_DIC_API_KEY;\r\n\r\nexport const searchKorean = ( query, myFnc ) => {\r\n    const options = {\r\n        method: 'GET',\r\n        url : `https://krdict.korean.go.kr/api/search?key=${API_KEY}&type_search=search&part=word&q=${query}&sort=dict`,\r\n    }\r\n    axios.request(options)\r\n    .then((response) => response.data)\r\n    .then(responseData => parseString(responseData, (err, result) => {\r\n        myFnc(result.channel.item);\r\n        console.log('getKoreanSearch Running')\r\n    }))\r\n    .catch((error) => console.log(error));\r\n}\r\n\r\nexport const getWord = (query, myFnc) => {\r\n    const config = {\r\n        method: 'GET',\r\n        url : `https://krdict.korean.go.kr/api/search?key=${API_KEY}&type_search=search&part=dfn&q=${query}&num=100&sort=popular`,\r\n    }\r\n    axios.request(config)\r\n    .then((response) => response.data)\r\n    .then(responseData => parseString(responseData, (err, result) => {\r\n        myFnc(result.channel.item);\r\n        console.log('getWord Running')\r\n    }))\r\n    .catch((error) => console.log(error));\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst SearchResultCard = ({word, wordDefArray, sameWordResultObj}) => {\r\n    const [sameWordArray, setSameWordArray] = useState(sameWordResultObj[word]['sameWordArray']);\r\n    const [sameWordDefArray, setSameWordDefArray] = useState(sameWordResultObj[word]['defArray']);\r\n    \r\n\r\n    return (\r\n        <>\r\n        <WordTitle>{word}</WordTitle>\r\n        {wordDefArray.map(item => \r\n                <EachWordDef>\r\n                    <EachWordDefText>{wordDefArray.indexOf(item) + 1}.  {item}</EachWordDefText>\r\n                </EachWordDef>\r\n            )}\r\n        <SameWordContainer>\r\n            {sameWordArray.map(item => \r\n                <SameItem>{item}</SameItem>\r\n            \r\n            )}\r\n        </SameWordContainer>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst WordTitle = styled.div`\r\n    font-size:1.7em;\r\n    margin-top: 2em;\r\n    margin-bottom:1.1em;\r\n    padding-bottom: 0.5em;\r\n    border-bottom: 1.5px solid gray;\r\n    color:brown;\r\n`;\r\nconst EachWordDef = styled.div`\r\n    margin-top : 1em;\r\n    margin-bottom: 3.5em;\r\n`;\r\nconst EachWordDefText = styled.div`\r\n        margin-top: 1em;\r\n        font-weight: 600;\r\n        margin-bottom: 1em;\r\n`;\r\nconst Button = styled.button`\r\n    \r\n`;\r\nconst SameItem = styled.span`\r\n    margin-right:1em;\r\n    color:blue;\r\n`;\r\nconst SameWordContainer = styled.div`\r\n    width:80%;\r\n`;\r\n\r\nexport default SearchResultCard;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport SearchResultCard from './SearchResultCard';\r\n\r\nconst SearchResult = ({query, searchResultObj, sameWordResultObj, itemName }) => {\r\n    \r\n    \r\n    return(\r\n        <Container>\r\n            {itemName.map(item => \r\n                <SearchResultCard\r\n                    key={item}\r\n                    word={item}\r\n                    wordDefArray={\r\n                        searchResultObj[item]['def']\r\n                    }\r\n                    sameWordResultObj={sameWordResultObj}\r\n                />\r\n                )}\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    \r\n`;\r\n\r\nexport default SearchResult;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { getWord, searchKorean } from '../service/TranslateAPI';\r\nimport SearchResult from './SearchResult';\r\n\r\nconst SearchTemplate = (props) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [storedData, setStoredData] = useState([]);\r\n    const [showingData, setShowingData] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [data, setData] = useState({});\r\n\r\n    const storeData = ( text ) => {\r\n            let items = [...new Set([...storedData, text])]\r\n            if(items.length > 20){\r\n                items = items.slice(1);\r\n            }\r\n            const tempObj = {\r\n                 items : items\r\n            }\r\n           localStorage.setItem('search_key', JSON.stringify(tempObj));\r\n           console.log('saved')\r\n    }\r\n\r\n    const getLocalData =  () => {\r\n            const value = localStorage.getItem('search_key')\r\n            const jsonVal = JSON.parse(value);\r\n                if(value!==null){\r\n                    setStoredData(preVal => jsonVal['items']);\r\n                    setShowingData(preVal => [...jsonVal['items']].reverse());\r\n                }    \r\n        }\r\n\r\n    \r\n    const onPressSearch = ( text ) => {\r\n        console.log('search')\r\n        setLoading(true);\r\n        storeData(text)\r\n        searchKorean(text, (value) => {\r\n            let temp = {};\r\n            let tempArray = [];\r\n            if(!value){\r\n                // navigation.navigate('SearchFail');\r\n                setLoading(false);\r\n            } else{\r\n                for(let i = 0; i< value.length; i ++){\r\n                    for(let j = 0 ; j < value[i]['sense'].length; j++){\r\n                        tempArray.push(value[i]['sense'][j]['definition'][0])\r\n                        temp[value[i]['word'][0]] = {\r\n                            def: [...tempArray]\r\n                        } \r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            const objKeys = Object.keys(temp);\r\n            const eachDefLength = objKeys.map(item => temp[item]['def'].length)\r\n            const tempResult = objKeys.map(item => temp[item]['def'].slice(\r\n                eachDefLength[objKeys.indexOf(item)-1]))\r\n\r\n            for(let k = 0; k < tempResult.length ; k ++){\r\n                temp[objKeys[k]]['def'] = tempResult[k];\r\n            }\r\n\r\n            const splitKeys = Object.keys(temp).slice(0,4)\r\n            const newTempObj = {};\r\n            splitKeys.forEach(item => newTempObj[item] = temp[item])\r\n            console.log(newTempObj);\r\n\r\n            // 유사어 찾기 및 필터링\r\n\r\n            let itemName =[];\r\n            let resultTempObj ={};\r\n            let countNum = [];\r\n                 Object.keys(newTempObj).forEach(item => {\r\n                    getWord(item, (value) => {\r\n                        // value가 있다면, itemName에 선별적 push.\r\n                        \r\n                        let wordTemp = [];\r\n                        let defTemp = [];\r\n                        \r\n                        if(value){\r\n                            itemName.push(item);\r\n                            for(let i= 0; i < value.length; i ++){\r\n                                // 중복단어 배제를 위해 if절 삽입\r\n                                if(!wordTemp.includes(value[i]['word'][0])){\r\n                                    wordTemp.push(value[i]['word'][0]);\r\n                                    defTemp.push(value[i]['sense'][0]['definition'][0]);\r\n                                }\r\n                            }\r\n                            resultTempObj[item] = {\r\n                                sameWordArray: [...wordTemp],\r\n                                defArray: [...defTemp],\r\n                            }\r\n                        }\r\n\r\n                        countNum.push(item)\r\n                        \r\n                        \r\n\r\n                        //search 결과 페이지로 보내기\r\n                        \r\n                        if(countNum.length === Object.keys(newTempObj).length){\r\n                            if(itemName.length === 0){\r\n                                // navigation.navigate('SearchFail');\r\n                                setLoading(false);\r\n                            } else {\r\n                                // navigation.navigate('SearchResult', {\r\n                                //     query : text,\r\n                                //     resultLength: itemName.length,\r\n                                //     itemName: itemName,\r\n                                //     searchResultObj: newTempObj,\r\n                                //     sameWordResultObj: resultTempObj,\r\n                                // })\r\n                                const searchResult = {\r\n                                    query : text,\r\n                                    resultLength: itemName.length,\r\n                                    itemName: itemName,\r\n                                    searchResultObj: newTempObj,\r\n                                    sameWordResultObj: resultTempObj,\r\n                                }\r\n                                setData(searchResult);\r\n            \r\n                            }\r\n                        }\r\n                        \r\n                    })\r\n                    \r\n                })  \r\n                \r\n        })\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n        }, 5000)\r\n        getLocalData();\r\n        \r\n    }\r\n\r\n    const onChangeInput = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <SearchContainer>\r\n                <Input value={inputValue} placeholder='검색어를 입력하세요'  onChange={onChangeInput}>\r\n                </Input>\r\n                <Button onClick={() => onPressSearch(inputValue)}>\r\n                검색하기\r\n                </Button>\r\n            </SearchContainer>\r\n\r\n            {data.itemName && <SearchResult \r\n                query ={data.query}\r\n                searchResultObj ={data.searchResultObj}\r\n                sameWordResultObj ={data.sameWordResultObj}\r\n                itemName ={data.itemName}\r\n            />}\r\n        </Container>\r\n    )\r\n}\r\nconst Container = styled.div`\r\n    display:flex;\r\n    flex-direction:column;\r\n    align-items:center;\r\n    justify-content:center;\r\n    margin-bottom:5em;\r\n    width:80vw;\r\n`;\r\nconst SearchContainer = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    align-items:center;\r\n    margin-bottom: 5em;\r\n`;\r\nconst Input = styled.input`\r\n    height:1.5em;\r\n    width:20vw;\r\n    border-radius:0.5em;\r\n    margin-right:2em;\r\n    margin-top:-2em;\r\n    padding:0.5em;\r\n    outline:none;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    margin-top:-2em;\r\n    padding:0.5em;\r\n`;\r\n\r\nexport default SearchTemplate;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport SearchTemplate from './SearchTemplate';\r\n\r\nconst Main = (props) => {\r\n    return(\r\n        <Container>\r\n            <SearchTemplate/>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n`;\r\n\r\nexport default Main;","import './App.css';\nimport styled, {  createGlobalStyle } from 'styled-components';\nimport React from 'react';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <>\n    <GlobalStyle />\n      <Container>\n        <LogoImg src='/imgs/logo.png' alt='logo'/>\n        <Main />\n      </Container>\n    </>\n  );\n}\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    display:flex;\n  }\n`;\n\nconst Container = styled.div`\n  width:100vw;\n  display:flex;\n  flex-direction:column;\n  align-items:center;\n  justify-content:center;\n`;\n\nconst LogoImg = styled.img`\n  width: 20%;\n  height: 20%;\n`;\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}